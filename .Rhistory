right = miniUI::miniTitleBarButton(inputId = "go","Run",primary = TRUE)),
miniUI::miniContentPanel(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::uiOutput('subjid'),
shiny::sliderInput(inputId = "x_range",label =  "Days Range", min = 0, max = 1000, value = c(0,755)),
shiny::uiOutput('hover'),
shiny::uiOutput('y_var'),
shiny::uiOutput('method')
),
shiny::mainPanel(shiny::plotOutput("fitPlot"))
)
))
shiny::runGadget(ui, server, viewer = shiny::paneViewer(minHeight = 450))
}
memofit(data=smc,db = db, f=mem_hgbd)
memofit <- function(data, db, f) {
system('git add .rcache')
synch_remote(action = 'pull')
server <- function(input, output, session) {
shiny::observeEvent(plot_data(),{
output$fitPlot <- shiny::renderPlot({
ggplot()+
geom_point(data=plot_data()$xy,aes(x=x,y=y,colour=subjid))+
geom_line(data=plot_data()$fitgrid,aes(x=x,y=y,colour=subjid))+
scale_x_continuous(limits=input$x_range)
})
})
fit <- shiny::eventReactive(input$go,{
memoise_wrapper(f=f,db=db, dat = smc, y_var = input$y_var, method=input$method)
})
plot_data <- shiny::reactive({
suppressMessages({
fit_traj <- lapply(as.numeric(input$subjid), function(x,fit0){
fit_trajectory(subset(smc, subjid == x), fit = fit0)
},fit0=fit())
})
if(length(input$subjid)==1){
fit_traj <- fit_traj[[1]]
xy <- fit_traj$xy
xy$subjid <- input$subjid
fitgrid <- fit_traj$fitgrid
fitgrid$subjid <- input$subjid
}else{
names(fit_traj) <- input$subjid
xy <- plyr::ldply(fit_traj,function(x) x$xy,.id='subjid')
fitgrid <- plyr::ldply(fit_traj,function(x) x$fitgrid,.id='subjid')
}
return(list(xy=xy,fitgrid=fitgrid))
})
output$hover <- shiny::renderUI({
shiny::selectInput(inputId = 'hover',
label = 'variables to hover',
choices = names(smc),
selected = c("agedays", "htcm"),
multiple = TRUE)
})
output$y_var <- shiny::renderUI({
shiny::selectInput(inputId = 'y_var',
label = 'conditional variable',
choices = names(smc),
selected = 'haz')
})
output$method <- shiny::renderUI({
shiny::selectInput(inputId = 'method',
label = 'fit method',
choices = hbgd::get_avail_methods(),
selected = 'fda')
})
output$subjid <- shiny::renderUI({
shiny::selectInput(inputId = 'subjid',
label = 'select subject to plot',
choices = as.character(unique(smc$subjid)),
multiple = TRUE,
selected = '10001')
})
shiny::observeEvent(input$exit,{
synch_remote(action = 'push')
shiny::stopApp()
})
}
ui <- miniUI::miniPage(
miniUI::gadgetTitleBar(title = 'Memoised HBGD Trajectory Fit',
left = miniUI::miniTitleBarButton( "exit", "Quit"),
right = miniUI::miniTitleBarButton(inputId = "go","Run",primary = TRUE)),
miniUI::miniContentPanel(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::uiOutput('subjid'),
shiny::sliderInput(inputId = "x_range",label =  "Days Range", min = 0, max = 1000, value = c(0,755)),
shiny::uiOutput('hover'),
shiny::uiOutput('y_var'),
shiny::uiOutput('method')
),
shiny::mainPanel(shiny::plotOutput("fitPlot"))
)
))
shiny::runGadget(ui, server, viewer = shiny::paneViewer(minHeight = 450))
}
memofit(data=smc,db = db, f=mem_hgbd)
memofit(data=smc,db = db, f=mem_hgbd)
memofit(data=smc,db = db, f=mem_hgbd)
memofit(data=smc,db = db, f=mem_hgbd)
list.files('.rcache',pattern = '^_')
readRDS(list.files('.rcache',pattern = '^_'))[1]]
readRDS(list.files('.rcache',pattern = '^_')[1])
readRDS(list.files('.rcache',pattern = '^_',full.names = TRUE)[1])
memofit <- function(data, db, f) {
system('git add .rcache')
synch_remote(action = 'pull')
server <- function(input, output, session) {
shiny::observeEvent(plot_data(),{
output$fitPlot <- shiny::renderPlot({
ggplot()+
geom_point(data=plot_data()$xy,aes(x=x,y=y,colour=subjid))+
geom_line(data=plot_data()$fitgrid,aes(x=x,y=y,colour=subjid))+
scale_x_continuous(limits=input$x_range)
})
})
fit <- shiny::eventReactive(input$go,{
memoise_wrapper(f=f,db=db, dat = smc, y_var = input$y_var, method=input$method)
})
plot_data <- shiny::reactive({
suppressMessages({
fit_traj <- lapply(as.numeric(input$subjid), function(x,fit0){
fit_trajectory(subset(smc, subjid == x), fit = fit0)
},fit0=fit())
})
if(length(input$subjid)==1){
fit_traj <- fit_traj[[1]]
xy <- fit_traj$xy
xy$subjid <- input$subjid
fitgrid <- fit_traj$fitgrid
fitgrid$subjid <- input$subjid
}else{
names(fit_traj) <- input$subjid
xy <- plyr::ldply(fit_traj,function(x) x$xy,.id='subjid')
fitgrid <- plyr::ldply(fit_traj,function(x) x$fitgrid,.id='subjid')
}
return(list(xy=xy,fitgrid=fitgrid))
})
output$y_var <- shiny::renderUI({
shiny::selectInput(inputId = 'y_var',
label = 'conditional variable',
choices = names(smc),
selected = 'haz')
})
output$method <- shiny::renderUI({
shiny::selectInput(inputId = 'method',
label = 'fit method',
choices = hbgd::get_avail_methods(),
selected = 'fda')
})
output$subjid <- shiny::renderUI({
shiny::selectInput(inputId = 'subjid',
label = 'select subject to plot',
choices = as.character(unique(smc$subjid)),
multiple = TRUE,
selected = '10001')
})
shiny::observeEvent(input$exit,{
synch_remote(action = 'push')
shiny::stopApp()
})
shiny::renderUI({
FILES <- list.files('.rcache',pattern = '^_')
shiny::selectInput(inputId = 'prerun',
label = 'Pre Run Fits',
choices = FILES,
selected = FILES[1])
})
}
ui <- miniUI::miniPage(
miniUI::gadgetTitleBar(title = 'Memoised HBGD Trajectory Fit',
left = miniUI::miniTitleBarButton( "exit", "Quit"),
right = miniUI::miniTitleBarButton(inputId = "go","Run",primary = TRUE)),
miniUI::miniContentPanel(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::uiOutput('prerun'),
shiny::uiOutput('subjid'),
shiny::sliderInput(inputId = "x_range",label =  "Days Range", min = 0, max = 1000, value = c(0,755)),
shiny::uiOutput('y_var'),
shiny::uiOutput('method')
),
shiny::mainPanel(shiny::plotOutput("fitPlot"))
)
))
shiny::runGadget(ui, server, viewer = shiny::paneViewer(minHeight = 450))
}
memofit(data=smc,db = db, f=mem_hgbd)
memofit <- function(data, db, f) {
system('git add .rcache')
synch_remote(action = 'pull')
server <- function(input, output, session) {
shiny::observeEvent(plot_data(),{
if(!is.null(plot_data())){
output$fitPlot <- shiny::renderPlot({
ggplot()+
geom_point(data=plot_data()$xy,aes(x=x,y=y,colour=subjid))+
geom_line(data=plot_data()$fitgrid,aes(x=x,y=y,colour=subjid))+
scale_x_continuous(limits=input$x_range)
})}
})
fit <- shiny::eventReactive(input$go,{
memoise_wrapper(f=f,db=db, dat = smc, y_var = input$y_var, method=input$method)
})
plot_data <- shiny::reactive({
suppressMessages({
fit_traj <- lapply(as.numeric(input$subjid), function(x,fit0){
fit_trajectory(subset(smc, subjid == x), fit = fit0)
},fit0=fit())
})
if(length(input$subjid)==1){
fit_traj <- fit_traj[[1]]
xy <- fit_traj$xy
xy$subjid <- input$subjid
fitgrid <- fit_traj$fitgrid
fitgrid$subjid <- input$subjid
}else{
names(fit_traj) <- input$subjid
xy <- plyr::ldply(fit_traj,function(x) x$xy,.id='subjid')
fitgrid <- plyr::ldply(fit_traj,function(x) x$fitgrid,.id='subjid')
}
return(list(xy=xy,fitgrid=fitgrid))
})
output$y_var <- shiny::renderUI({
shiny::selectInput(inputId = 'y_var',
label = 'conditional variable',
choices = names(smc),
selected = 'haz')
})
output$method <- shiny::renderUI({
shiny::selectInput(inputId = 'method',
label = 'fit method',
choices = hbgd::get_avail_methods(),
selected = 'fda')
})
output$subjid <- shiny::renderUI({
shiny::selectInput(inputId = 'subjid',
label = 'select subject to plot',
choices = as.character(unique(smc$subjid)),
multiple = TRUE,
selected = '10001')
})
shiny::observeEvent(input$exit,{
synch_remote(action = 'push')
shiny::stopApp()
})
output$prerun <- shiny::renderUI({
FILES <- list.files('.rcache',pattern = '^_')
shiny::selectInput(inputId = 'prerun',
label = 'Pre Run Fits',
choices = FILES,
selected = FILES[1])
})
}
ui <- miniUI::miniPage(
miniUI::gadgetTitleBar(title = 'Memoised HBGD Trajectory Fit',
left = miniUI::miniTitleBarButton( "exit", "Quit"),
right = miniUI::miniTitleBarButton(inputId = "go","Run",primary = TRUE)),
miniUI::miniContentPanel(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::uiOutput('prerun'),
shiny::uiOutput('subjid'),
shiny::sliderInput(inputId = "x_range",label =  "Days Range", min = 0, max = 1000, value = c(0,755)),
shiny::uiOutput('y_var'),
shiny::uiOutput('method')
),
shiny::mainPanel(shiny::plotOutput("fitPlot"))
)
))
shiny::runGadget(ui, server, viewer = shiny::paneViewer(minHeight = 450))
}
memofit(data=smc,db = db, f=mem_hgbd)
db$reset()
memofit <- function(data, db, f) {
synch_remote(action = 'pull')
server <- function(input, output, session) {
shiny::observeEvent(plot_data(),{
if(!is.null(plot_data())){
output$fitPlot <- shiny::renderPlot({
ggplot()+
geom_point(data=plot_data()$xy,aes(x=x,y=y,colour=subjid))+
geom_line(data=plot_data()$fitgrid,aes(x=x,y=y,colour=subjid))+
scale_x_continuous(limits=input$x_range)
})}
})
fit <- shiny::eventReactive(input$go,{
memoise_wrapper(f=f,db=db, dat = smc, y_var = input$y_var, method=input$method)
})
plot_data <- shiny::reactive({
suppressMessages({
fit_traj <- lapply(as.numeric(input$subjid), function(x,fit0){
fit_trajectory(subset(smc, subjid == x), fit = fit0)
},fit0=fit())
})
if(length(input$subjid)==1){
fit_traj <- fit_traj[[1]]
xy <- fit_traj$xy
xy$subjid <- input$subjid
fitgrid <- fit_traj$fitgrid
fitgrid$subjid <- input$subjid
}else{
names(fit_traj) <- input$subjid
xy <- plyr::ldply(fit_traj,function(x) x$xy,.id='subjid')
fitgrid <- plyr::ldply(fit_traj,function(x) x$fitgrid,.id='subjid')
}
return(list(xy=xy,fitgrid=fitgrid))
})
output$y_var <- shiny::renderUI({
shiny::selectInput(inputId = 'y_var',
label = 'conditional variable',
choices = names(smc),
selected = 'haz')
})
output$method <- shiny::renderUI({
shiny::selectInput(inputId = 'method',
label = 'fit method',
choices = hbgd::get_avail_methods(),
selected = 'fda')
})
output$subjid <- shiny::renderUI({
shiny::selectInput(inputId = 'subjid',
label = 'select subject to plot',
choices = as.character(unique(smc$subjid)),
multiple = TRUE,
selected = '10001')
})
shiny::observeEvent(input$exit,{
synch_remote(action = 'push')
shiny::stopApp()
})
output$prerun <- shiny::renderUI({
FILES <- list.files('.rcache',pattern = '^_')
shiny::selectInput(inputId = 'prerun',
label = 'Pre Run Fits',
choices = FILES,
selected = FILES[1])
})
}
ui <- miniUI::miniPage(
miniUI::gadgetTitleBar(title = 'Memoised HBGD Trajectory Fit',
left = miniUI::miniTitleBarButton( "exit", "Quit"),
right = miniUI::miniTitleBarButton(inputId = "go","Run",primary = TRUE)),
miniUI::miniContentPanel(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::uiOutput('prerun'),
shiny::uiOutput('subjid'),
shiny::sliderInput(inputId = "x_range",label =  "Days Range", min = 0, max = 1000, value = c(0,755)),
shiny::uiOutput('y_var'),
shiny::uiOutput('method')
),
shiny::mainPanel(shiny::plotOutput("fitPlot"))
)
))
shiny::runGadget(ui, server, viewer = shiny::paneViewer(minHeight = 450))
}
rm(list=ls())
memofit <- function(data, db, f) {
synch_remote(action = 'pull')
server <- function(input, output, session) {
shiny::observeEvent(plot_data(),{
if(!is.null(plot_data())){
output$fitPlot <- shiny::renderPlot({
ggplot2::ggplot()+
ggplot2::geom_point(data=plot_data()$xy,ggplot2::aes(x=x,y=y,colour=subjid))+
ggplot2::geom_line(data=plot_data()$fitgrid,ggplot2::aes(x=x,y=y,colour=subjid))+
ggplot2::scale_x_continuous(limits=input$x_range)
})}
})
fit <- shiny::eventReactive(input$go,{
memoise_wrapper(f=f,db=db, dat = smc, y_var = input$y_var, method=input$method)
})
plot_data <- shiny::reactive({
suppressMessages({
fit_traj <- lapply(as.numeric(input$subjid), function(x,fit0){
fit_trajectory(subset(smc, subjid == x), fit = fit0)
},fit0=fit())
})
if(length(input$subjid)==1){
fit_traj <- fit_traj[[1]]
xy <- fit_traj$xy
xy$subjid <- input$subjid
fitgrid <- fit_traj$fitgrid
fitgrid$subjid <- input$subjid
}else{
names(fit_traj) <- input$subjid
xy <- plyr::ldply(fit_traj,function(x) x$xy,.id='subjid')
fitgrid <- plyr::ldply(fit_traj,function(x) x$fitgrid,.id='subjid')
}
return(list(xy=xy,fitgrid=fitgrid))
})
output$y_var <- shiny::renderUI({
shiny::selectInput(inputId = 'y_var',
label = 'conditional variable',
choices = names(smc),
selected = 'haz')
})
output$method <- shiny::renderUI({
shiny::selectInput(inputId = 'method',
label = 'fit method',
choices = hbgd::get_avail_methods(),
selected = 'fda')
})
output$subjid <- shiny::renderUI({
shiny::selectInput(inputId = 'subjid',
label = 'select subject to plot',
choices = as.character(unique(smc$subjid)),
multiple = TRUE,
selected = '10001')
})
shiny::observeEvent(input$exit,{
synch_remote(action = 'push')
shiny::stopApp()
})
output$prerun <- shiny::renderUI({
FILES <- list.files('.rcache',pattern = '^_')
shiny::selectInput(inputId = 'prerun',
label = 'Pre Run Fits',
choices = FILES,
selected = FILES[1])
})
}
ui <- miniUI::miniPage(
miniUI::gadgetTitleBar(title = 'Memoised HBGD Trajectory Fit',
left = miniUI::miniTitleBarButton( "exit", "Quit"),
right = miniUI::miniTitleBarButton(inputId = "go","Run",primary = TRUE)),
miniUI::miniContentPanel(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::uiOutput('prerun'),
shiny::uiOutput('subjid'),
shiny::sliderInput(inputId = "x_range",label =  "Days Range", min = 0, max = 1000, value = c(0,755)),
shiny::uiOutput('y_var'),
shiny::uiOutput('method')
),
shiny::mainPanel(shiny::plotOutput("fitPlot"))
)
))
shiny::runGadget(ui, server, viewer = shiny::paneViewer(minHeight = 450))
}
library(gdigest)
sinew::makeImport(list.files('R',full.names = TRUE),format = 'description')
library(gdigest)
rm(memofit)
db <- memoise::cache_filesystem("~/projects/gdigest/.rcache")
smc <- hbgd::get_smocc_data()[1:2000,]
mem_hgbd <- memoise::memoise(function(...){
on.exit({
assign(digest::digest(list(...)),list(...),envir = sys.frame(-1))
},add = TRUE)
hbgd::get_fit(...)
}, cache = db)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
list.files('.rcache')
library(gdigest)
db$reset()
memofit(data=smc,db = db, f=mem_hgbd)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
?shiny::tabPanel
library(gdigest)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
readRDS(list.files('.rcache',pattern = '^_',full.names = TRUE)[1])
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
memofit(data=smc,db = db, f=mem_hgbd)
library(gdigest)
db <- memoise::cache_filesystem("~/projects/gdigest/.rcache")
smc <- hbgd::get_smocc_data()[1:2000,]
mem_hgbd <- memoise::memoise(function(...){
on.exit({
assign(digest::digest(list(...)),list(...),envir = sys.frame(-1))
},add = TRUE)
hbgd::get_fit(...)
}, cache = db)
memofit(data=smc,db = db, f=mem_hgbd)
library(memoise)
memofit(data=smc,db = db, f=mem_hgbd)
library(hbgd)
memofit(data=smc,db = db, f=mem_hgbd)
readRDS('.rcache/_c6d9f2825a7d282a')
readRDS('.rcache/d7dfdd7e0812646a')
x <- readRDS('.rcache/_c6d9f2825a7d282a')
View(x)
memofit(data=smc,db = db, f=mem_hgbd)
memofit(data=smc,db = db, f=mem_hgbd)
x <- readRDS('.rcache/_88600535ded2397e')
View(x)
readRDS('.rcache/88600535ded2397e')
readRDS('.rcache/88600535ded2397e')$value
y <- readRDS('.rcache/88600535ded2397e')$value
?memofit
library(gdigest)
