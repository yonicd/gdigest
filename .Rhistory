library(gdigest)
load_dictionary()
library(gdigest)
load_dictionary()
dictionary
library(gdigest)
vcs::ls_remote('yonicd/gdigest')
vcs::ls_remote('yonicd/gdigest',subdir = 'storage')
rm(list=ls(pattern = '^_'))
digest_dictionary(mtcars,iris,iris3)
vcs::ls_remote('yonicd/gdigest',subdir = 'storage')
basename(vcs::ls_remote('yonicd/gdigest',subdir = 'storage'))
retrieve_dictionary <- function(repo,storage='storage'){
basename(vcs::ls_remote(repo,subdir = storage))
}
retrieve_dictionary('yonicd/gdigest')
setdiff(retrieve_dictionary('yonicd/gdigest'),list.files(storage))
setdiff(retrieve_dictionary('yonicd/gdigest'),list.files('storage'))
setdiff(c('a','b'),'b')
setdiff(c('a','b'),c('b','c'))
storage='storage'
system(sprintf('git checkout HEAD %s',storage))
system(sprintf('git checkout HEAD %s',storage))
synch_remote <- function(repo, local_storage='storage', remote_storage='storage', ...){
repo_current <- basename(vcs::ls_remote(repo, subdir = remote_storage, ...))
new_from_remote <- setdiff(repo_current, list.files(local_storage))
if(length(new)>0){
system('git fetch')
system(sprintf('git checkout HEAD %s',storage))
}
}
retrieve_dictionary('yonicd/gdigest')
synch_remote('yonicd/gdigest')
rm(list=ls())
library(gdigest)
library(gdigest)
synch_remote('yonicd/gdigest')
library(gdigest)
synch_remote('yonicd/gdigest')
synch_remote('yonicd/gdigest')
load_dictionary()
dictionary
?print
data.frame(dictionary)
library(gdigest)
load_dictionary()
load_dictionary()
class(dictionary)
c('dictionary',class(dictionary))
load_dictionary()
library(gdigest)
library(gdigest)
load_dictionary()
library(gdigest)
load_dictionary()
dictionary
library(gdigest)
library(gdigest)
data.frame(dictionary)
data.frame(digest=dictionary)
system('git status storage')
system('git diff --stat --cached -- storage')
system('git diff --stat HEAD -- storage')
system('git diff --stat HEAD -- storage',intern = TRUE)
nzchar(system('git diff --stat HEAD -- storage',intern = TRUE))
length(system('git diff --stat HEAD -- storage',intern = TRUE))
nzchar(system('git diff --stat HEAD -- storage',intern = TRUE))
system('git diff --stat HEAD -- storage',intern = TRUE)
all(nzchar(system('git diff --stat HEAD -- storage',intern = TRUE))
)
system('git fetch')
system(sprintf('git checkout HEAD %s','storage'))
nzchar(system('git diff --stat HEAD -- storage',intern = TRUE))
all(nzchar(system('git diff --stat HEAD -- storage',intern = TRUE)))
library(gdigest)
synch_remote('yonicd/gdigest')
library(gdigest)
digest_dictionary(volcano)
synch_remote('yonicd/gdigest')
library(gdigest)
synch_remote('yonicd/gdigest')
system('git status')
system("git commit -m 'add' -- remote_storage")
new_from_local
sprintf("git commit -m 'add files %s' -- %s",paste0(new_from_local,collapse = ','),remote_storage)
system(sprintf("git commit -m 'add files %s' -- %s",paste0(new_from_local,collapse = ','),remote_storage))
system('git push origin master')
system(sprintf("git add %s",remote_storage))
system(sprintf("git commit -m 'add files %s' -- %s",paste0(new_from_local,collapse = ','),remote_storage))
system('git push origin master')
library(gdigest)
synch_remote('yonicd/gdigest')
synch_remote('yonicd/gdigest')
library(gdigest)
library(gdigest)
library(gdigest)
library(gdigest)
digest_dictionary(mtcars)
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
library(gdigest)
library(gdigest)
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
library(gdigest)
library(gdigest)
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
digest_dictionary(mtcars)
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
dots
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
match.call()
match.arg(...)
match.arg('...')
match.arg(repo)
match.arg('repo')
match.call(expand.dots = TRUE)
match.call
library(gdigest)
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
param.names[1:length(dots)]
library(gdigest)
digest_dictionary(mtcars,repo = 'yonicd/gdigest')
data(package='datasets')$results[,'Item']
digest_dictionary(warpbreaks,repo = 'yonicd/gdigest')
synch_remote('yonicd/gdigest')
knitr::kable(dictionary)
knitr::kable(dictionary,col.names = c('object','digest'))
knitr::kable(dictionary,col.names = c('digest'))
load_dictionary(storage = local_storage)
load_dictionary()
knitr::kable(dictionary,col.names = 'digest')
cat(knitr::kable(dictionary,col.names = 'digest'),file=file.path(local_storage,'README.md'))
local_storage='storage'
cat(knitr::kable(dictionary,col.names = 'digest'),file=file.path(local_storage,'README.md'))
system(sprintf("git add %s",remote_storage))
system(sprintf("git commit -m 'add files %s' -- %s",paste0(new_from_local,collapse = ','),remote_storage))
remote_storage='storage'
system(sprintf("git add %s",remote_storage))
system(sprintf("git commit -m 'add files %s' -- %s",paste0(new_from_local,collapse = ','),remote_storage))
repo='yonicd/gdigest'
repo_current <- basename(vcs::ls_remote(repo, subdir = remote_storage, ...))
repo_current <- basename(vcs::ls_remote(repo, subdir = remote_storage))
new_from_local <- setdiff(list.files(local_storage),repo_current)
library(gdigest)
synch_remote('yonicd/gdigest')
cat(knitr::kable(dictionary,col.names = 'digest'),file=file.path(local_storage,'README.md'),sep='\n')
library(gdigest)
synch_remote('yonicd/gdigest')
library(gdigest)
rm(list=ls())
library(gdigest)
digest_dictionary()
library(gdigest)
digest_dictionary()
library(gdigest)
digest_dictionary()
library(gdigest)
load_dictionary()
system('git remote -v')
system('git remote -v',intern=TRUE)
system('git remote -v',intern=TRUE)[1]
gsub('^(.*?):','',system('git remote -v',intern=TRUE)[1])
gsub('\\.(.*?)$','',gsub('^(.*?):','',system('git remote -v',intern=TRUE)[1]))
library(gdigest)
synch_remote()
library(gdigest)
setwd("~/projects")
synch_remote()
library(gdigest)
synch_remote()
library(gdigest)
synch_remote()
setwd("~/projects/gdigest")
synch_remote()
?synch_remote
library(gdigest)
library(gdigest)
digest_dictionary(mtcars)
library(gdigest)
library(gdigest)
digest_dictionary(mtcars)
data(package='datasets')$results[,'Item']
digest_dictionary(AirPassengers)
load_dictionary()
dictionary
library(gdigest)
library(gdigest)
synch_remote()
library(gdigest)
vcs::ls_remote('yonicd/gdigest',subdir = 'subdir')
vcs::ls_remote('yonicd/gdigest',subdir = 'storage')
vcs::ls_remote('yonicd/gdigest',subdir = 'storage',full.names = TRUE)
tail(vcs::ls_remote('yonicd/gdigest',subdir = 'storage',full.names = TRUE),1)
load(tail(vcs::ls_remote('yonicd/gdigest',subdir = 'storage',full.names = TRUE),1))
load(sprintf('%s?raw',tail(vcs::ls_remote('yonicd/gdigest',subdir = 'storage',full.names = TRUE),1)))
load('https://github.com/yonicd/gdigest/raw/master/storage/dictionary.rda')
load(sprintf('%s?raw=true',tail(vcs::ls_remote('yonicd/gdigest',subdir = 'storage',full.names = TRUE),1)))
sprintf('%s?raw=true',tail(vcs::ls_remote('yonicd/gdigest',subdir = 'storage',full.names = TRUE),1))
load('https://github.com/yonicd/gdigest/blob/master/storage/dictionary.rda?raw=true')
library(gdigest)
synch_remote()
library(gdigest)
digest_dictionary(mtcars)
digest_dictionary(ChickWeight)
digest_dictionary(ChickWeight)
library(gdigest)
digest_dictionary(HairEyeColor)
digest_dictionary(mtcars)
library(gdigest)
x <- digest_dictionary(mtcars)
library(gdigest)
x <- digest_dictionary(mtcars)
x
class(x)
x <- structure(x,class=c('dictionary','character'))
x <- c('a','b','c')
x <- structure(x,class=c('dictionary','character'))
x <- structure(x,class=c('myclass','character'))
rm(dictionary)
dictionary
library(gdigest)
x <- digest_dictionary(mtcars)
class(x)
library(gdigest)
x
library(gdigest)
x
x
class(x)
x
print(x)
library(gdigest)
x <- digest_dictionary(mtcars)
x
print(x)
View(x)
library(gdigest)
library(gdigest)
x <- digest_dictionary(mtcars)
x
View(x)
print(x)
a <- fastdigest(mtcars)
a <- fastdigest::fastdigest(mtcars)
class(a)
library(gdigest)
x <- digest_dictionary(mtcars)
x
print(x)
load_dictionary()
dictionary
?prin
?print
print.Date
library(gdigest)
dictionary
sinew::untangle(file='R/load_dictionary.R',dir.out = 'R')
library(gdigest)
?load
read?
?read
library(gdigest)
load_dictionary()
load_dictionary()
rm(list=ls())
load_dictionary()
dictionary
library(gdigest)
data("OrchardSprays")
View(OrchardSprays)
digest_dictionary(OrchardSprays)
load_dictionary()
library(gdigest)
load_dictionary()
digest_dictionary(OrchardSprays)
digest_dictionary(OrchardSprays)
digest_dictionary(OrchardSprays)
dictionary
dictionary
n
digest_dictionary(OrchardSprays)
library(gdigest)
digest_dictionary(OrchardSprays)
dictionary
this.digest
this.digest%in%dictionary
list.files(storage)
library(gdigest)
library(gdigest)
digest_dictionary(OrchardSprays)
rm(list=ls())
library(gdigest)
digest_dictionary(OrchardSprays)
digest_dictionary(mtcars)
digest_dictionary(iris,iris3)
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
substitute(lm(weight ~ group))
deparse(substitute(lm(weight ~ group)))
lm.D9$call
digest_dictionary(lm(weight ~ group))
readLines('.gitignore')
gi <- readLines('.gitignore')
any(grepl(local_storage,gi))
local_storage='storage'
any(grepl(local_storage,gi))
library(gdigest)
synch_remote(action='push')
grepl(local_storage,readLines('.gitignore')))
grepl(local_storage,readLines('.gitignore'))
any(grepl(local_storage,readLines('.gitignore')))
library(gdigest)
synch_remote(action='push')
library(gdigest)
synch_remote(action='push')
local_storage
grep(local_storage,gi)
readLines('.gitignore')
gi <- readLines('.gitignore')
grep(local_storage,gi)
gi <- gi[-grep(local_storage,gi)]
list.files('storage')
list.files('storage',pattern = '^_')
fastdigest::fastdigest(mtcars)
fastdigest::fastdigest(mtcars)
digest_dictionary(volcano)
load_dictionary()
dictionary
rm(list=ls())
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
library(gdigest)
digest_dictionary(lm(weight ~ group))
rm(list=ls())
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
library(gdigest)
digest_dictionary(lm(weight ~ group))
digest_dictionary(mtcars)
digest_dictionary('lm(weight ~ group)')
?synch_remote
sinew::untangle(file='R/load_dictionary.R',dir.out = 'R')
vcs::ls_remote('yonicd/gdigest', subdir = 'storage')
unique(c(readLines('.gitignore'),repo_current))
repo_current <- vcs::ls_remote('yonicd/gdigest', subdir = 'storage')
unique(c(readLines('.gitignore'),repo_current))
unique(c(readLines('.gitignore'),repo_current))
cat(unique(c(readLines('.gitignore'),repo_current)),file = '.gitignore',append = TRUE,sep='\n')
grep('storage/(README|dictionary)')
grep('storage/(README|dictionary)','.gitignore')
grep('storage\\/(README|dictionary)','.gitignore')
grep('storage/README','.gitignore')
grep('storage[/]README','.gitignore')
grep('storage','.gitignore')
grep('storage/(README|dictionary)',readLines('.gitignore'))
grep('storage/(README|dictionary)',readLines('.gitignore'),value=TRUE)
library(gdigest)
fastdigest::fastdigest(lm(weight ~ group))
fastdigest::fastdigest(lm(weight ~ group))
fastdigest::fastdigest(lm(weight ~ group))
digest_dictionary(mtcars)
digest_dictionary(mtcars)
vcs::sasha()
vcs::grepr('ppoints',path = list(repo='aloy/qqplotr',vcs='github',subdir='R'),interactive = TRUE)
?vcs::ls_remote
vcs::grepr('ppoints',path = list(path='aloy/qqplotr',vcs='github',subdir='R'),interactive = TRUE)
?ppoints
p.ppoints(4)
require(graphics)
p.ppoints <- function(n, ..., add = FALSE, col = par("col")) {
pn <- ppoints(n, ...)
if(add)
points(pn, pn, col=col)
else {
tit <- match.call(); tit[[1]] <- quote(ppoints)
plot(pn,pn, main = deparse(tit), col=col,
xlim=0:1, ylim=0:1, xaxs="i", yaxs="i")
abline(0,1, col = adjustcolor(1, 1/4), lty = 3)
}
if(requireNamespace("MASS", quietly=TRUE))
text(pn, pn, as.character(MASS::fractions(pn)),
adj = c(0,0)-1/4, cex = 3/4, xpd = NA, col=col)
abline(h=pn, v=pn, col = adjustcolor(col, 1/2), lty = 2, lwd = 1/2)
}
p.ppoints(4)
p.ppoints(10, a = 1/2)
p.ppoints(8) ; p.ppoints(8, a = 1/2, add=TRUE, col="tomato")
library(fastdigest)
fastdigest(lm(weight ~ group))
fastdigest(lm(weight ~ group))
digest_dictionary(mtcars)
rm(list=ls())
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
digest_dictionary(group)
digest_dictionary(group,weight)
load_dictionary()
dictionary
cache_s3
memoise::cache_s3
validate_formulas <- function(...) {
format.name <- function(x, ...) format(as.character(x), ...)
is_formula <- function(x) {
if (is.call(x) && identical(x[[1]], as.name("~"))) {
if (length(x) > 2L) {
stop("`x` must be a one sided formula [not ", format(x), "].", call. = FALSE)
}
} else {
stop("`", format(x), "` must be a formula.", call. = FALSE)
}
}
dots <- eval(substitute(alist(...)))
lapply(dots, is_formula)
}
validate_formulas(lm(weight ~ group))
validate_formulas(as.formula(weight ~ group))
validate_formulas(weight ~ group)
validate_formulas( ~ group)
library(didgest)
library(digest)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm(weight ~ group)
digest(lm(weight ~ group))
digest(lm(weight ~ group))
fastdigest(lm(weight ~ group))
library(fastdigest)
fastdigest(lm(weight ~ group))
library(gdigest)
digest_dictionary(lm(weight ~ group))
digest::digest(eval(parse(text = x)))
digest::digest(eval(parse(text = x)))
digest::digest(eval(parse(text = x)))
lm(weight~group)
digest(lm(weight~group))
digest::digest(eval(parse(text = x)))
digest_dictionary(lm(weight ~ group))
digest::digest(eval(parse(text = x)))
digest_dictionary(lm(weight ~ group))
digest_dictionary(lm(weight ~ group))
all.equal(`_742fb98586904dc67a6b1c4eccb6fda2`,`_79c8b9e7b441535a9b61c08679e1a812`)
digest_dictionary(lm(weight ~ group))
digest::digest(eval(parse(text = x)))
param.names
dictionary
this.digest
this.digest
library(memoise)
?cache_filesystem
mem_sum <- memoise(sum)
has_cache(mem_sum)(1, 2, 3)
body
encl$`_cache`$has_key(hash)
quote(if (encl$`_cache`$has_key(hash)) return(TRUE) else return(FALSE))
body
body[[9]]
body
library(gdigest)
has_cache(mem_sum)(1, 2, 3) # FALSE
library(gdigest)
has_cache(mem_sum)(1, 2, 3) # FALSE
library(gdigest)
mem_sum(1, 2, 3)
has_cache(mem_sum)(1, 2, 3) # TRUE
library(memoise)
db <- cache_filesystem("~/projects/gdigest/rcache")
library(hbgd)
db <- cache_filesystem("~/projects/gdigest/.rcache")
attach_mem_hash(x=ls()[which(sapply(ls(),nchar)==32)],fn=mem_wand,db=db,dat = smc, y_var = "haz", method = "wand")
attach_mem_hash <-function(x, db, fn, ...){
mem_hash<- get_cache(fn)(...)
temp <- get(x,envir = sys.frame(-1))
saveRDS(temp,file = file.path(db$path,sprintf('_%s',mem_hash)))
rm(list=x,envir = sys.frame(-1))
}
library(memoise)
db <- cache_filesystem("~/projects/gdigest/.rcache")
library(hbgd)
get_cache <- function(f, ...) {
if(!is.memoised(f)) stop("`f` is not a memoised function!", call. = FALSE)
body <- body(f)
body[[9]] <- quote(if (encl$`_cache`$has_key(hash)) return(hash) else return(FALSE))
body(f) <- body
f
}
smc <- get_smocc_data()[1:2000,]
mem_wand <- memoise(function(...){
on.exit({
#dots <- sapply(list(...),digest::digest,simplify = FALSE)
assign(digest::digest(list(...)),list(...),envir = sys.frame(-1))
},add = TRUE)
get_fit(...)
}, cache = db)
attach_mem_hash <-function(x, db, fn, ...){
mem_hash<- get_cache(fn)(...)
temp <- get(x,envir = sys.frame(-1))
saveRDS(temp,file = file.path(db$path,sprintf('_%s',mem_hash)))
rm(list=x,envir = sys.frame(-1))
}
attach_mem_hash(x=ls()[which(sapply(ls(),nchar)==32)],fn=mem_wand,db=db,dat = smc, y_var = "haz", method = "wand")
